from map_city_longitude_latitide import get_cities, query_google, \
                get_lat_lon_from

from nose.tools import nottest

import json, pprint
import pprint

pp = pprint.PrettyPrinter(indent=2)

def test_get_cities():
    res = get_cities()
    assert res == ['Southampton', 'Auckland', 'Johannesburg', 'Belfast', 'Cardiff', 'London', 'Nottingham', 'Birmingham', 'Chester-le-Street', 'Manchester', 'Leeds', 'Bristol', 'Brisbane', 'Melbourne', 'Perth', 'Hobart', 'Christchurch', 'Wellington', 'Peshawar', 'Lahore', 'Karachi', 'Bogra', 'Fatullah', 'Napier', 'Delhi', 'Faridabad', 'Margao', 'Jamshedpur', 'Indore', 'Centurion', 'Cape Town', 'Port Elizabeth', 'Durban', 'Colombo', 'Antigua', 'St Lucia', 'Trinidad', 'Jamaica', 'St Kitts', 'Abu Dhabi', 'Guyana', 'Grenada', 'Barbados', 'Nairobi', 'Chandigarh', 'Ahmedabad', 'Jaipur', 'Mumbai', 'Hamilton', 'Bloemfontein', 'Kuala Lumpur', 'Potchefstroom', 'Faisalabad', 'Benoni', 'East London', 'Mirpur', 'Chennai', 'Vadodara', 'Kolkata', 'Rajkot', 'Visakhapatnam', 'Glasgow', 'Bangalore', 'Dublin', 'Kochi', 'Hyderabad', 'Nagpur', 'Guwahati', 'Kanpur', 'Gwalior', 'Dunedin', 'Bulawayo', 'St Vincent', 'King City', 'Ayr', 'Sind', 'Darwin', 'Sydney', 'Cuttack', 'Chelmsford', 'Derby', 'Kimberley', 'Dominica', 'Toronto', 'Dharamsala', 'Chittagong', 'Paarl', 'Hambantota', 'Amstelveen', 'Lauderhill', 'Skating and Curling Club', 'Pianoro', 'Navile', 'Medicina', 'Nelson', 'Taunton', 'Aberdeen', 'Whangarei', 'Canterbury', 'Wormsley', 'Dubai', 'Pune', 'Northampton', 'Hove', 'Ranchi', 'Loughborough', 'The Hague', 'Canberra', 'Apia', 'Khulna', 'Windhoek', 'Raipur', 'Edinburgh', 'Bermuda', 'Sharjah', 'Lincoln', 'Mount Maunganui', 'Doha', 'Scarborough', 'Singapore', 'Padang', 'Gold Coast', 'Bowral', 'Dharmasala', 'Incheon', 'Selangor', 'Worcester', 'Londonderry', 'Stirling', 'Bangkok', 'Rotterdam', 'Colchester', 'Frinton-on-Sea', 'Halstead', 'Coggeshall', "Bishop's Stortford", "Cox's Bazar", 'Leicester', 'Mohali', 'Townsville', 'Greater Noida', 'Kirtipur', 'Hong Kong', 'St Martin', 'St Clement', 'St Saviour', 'Port Moresby']

@nottest
def test_query_google():
    res = query_google("London")
    assert res == {'results': [{'place_id': 'ChIJdd4hrwug2EcRmSrV3Vo6llI', 'address_components': [{'long_name': 'London', 'short_name': 'London', 'types': ['locality', 'political']}, {'long_name': 'London', 'short_name': 'London', 'types': ['postal_town']}, {'long_name': 'Greater London', 'short_name': 'Greater London', 'types': ['administrative_area_level_2', 'political']}, {'long_name': 'England', 'short_name': 'England', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United Kingdom', 'short_name': 'GB', 'types': ['country', 'political']}], 'types': ['locality', 'political'], 'formatted_address': 'London, UK', 'geometry': {'location': {'lat': 51.5073509, 'lng': -0.1277583}, 'location_type': 'APPROXIMATE', 'bounds': {'northeast': {'lat': 51.6723432, 'lng': 0.1482711}, 'southwest': {'lat': 51.38494009999999, 'lng': -0.3514683}}, 'viewport': {'northeast': {'lat': 51.6723432, 'lng': 0.1482711}, 'southwest': {'lat': 51.38494009999999, 'lng': -0.3514683}}}}, {'place_id': 'ChIJA8c2lxTNXIgRmMwHc-RRGWI', 'address_components': [{'long_name': 'London', 'short_name': 'London', 'types': ['locality', 'political']}, {'long_name': 'Laurel County', 'short_name': 'Laurel County', 'types': ['administrative_area_level_2', 'political']}, {'long_name': 'Kentucky', 'short_name': 'KY', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'short_name': 'US', 'types': ['country', 'political']}], 'types': ['locality', 'political'], 'formatted_address': 'London, KY, USA', 'geometry': {'location': {'lat': 37.1289771, 'lng': -84.08326459999999}, 'location_type': 'APPROXIMATE', 'bounds': {'northeast': {'lat': 37.15226, 'lng': -84.03595709999999}, 'southwest': {'lat': 37.0797588, 'lng': -84.126262}}, 'viewport': {'northeast': {'lat': 37.15226, 'lng': -84.03595709999999}, 'southwest': {'lat': 37.0797588, 'lng': -84.126262}}}}, {'place_id': 'ChIJPxME6JelOIgROH-JN5Bcr9Y', 'address_components': [{'long_name': 'London', 'short_name': 'London', 'types': ['locality', 'political']}, {'long_name': 'Madison County', 'short_name': 'Madison County', 'types': ['administrative_area_level_2', 'political']}, {'long_name': 'Ohio', 'short_name': 'OH', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'short_name': 'US', 'types': ['country', 'political']}, {'long_name': '43140', 'short_name': '43140', 'types': ['postal_code']}], 'types': ['locality', 'political'], 'formatted_address': 'London, OH 43140, USA', 'geometry': {'location': {'lat': 39.8864493, 'lng': -83.4482529}, 'location_type': 'APPROXIMATE', 'bounds': {'northeast': {'lat': 39.9217861, 'lng': -83.3899969}, 'southwest': {'lat': 39.85928, 'lng': -83.4789231}}, 'viewport': {'northeast': {'lat': 39.9217861, 'lng': -83.3899969}, 'southwest': {'lat': 39.85928, 'lng': -83.4789231}}}}], 'status': 'OK'}

def test_get_lat_lon_from():
    response = {'results': [{'place_id': 'ChIJdd4hrwug2EcRmSrV3Vo6llI', 'address_components': [{'long_name': 'London', 'short_name': 'London', 'types': ['locality', 'political']}, {'long_name': 'London', 'short_name': 'London', 'types': ['postal_town']}, {'long_name': 'Greater London', 'short_name': 'Greater London', 'types': ['administrative_area_level_2', 'political']}, {'long_name': 'England', 'short_name': 'England', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United Kingdom', 'short_name': 'GB', 'types': ['country', 'political']}], 'types': ['locality', 'political'], 'formatted_address': 'London, UK', 'geometry': {'location': {'lat': 51.5073509, 'lng': -0.1277583}, 'location_type': 'APPROXIMATE', 'bounds': {'northeast': {'lat': 51.6723432, 'lng': 0.1482711}, 'southwest': {'lat': 51.38494009999999, 'lng': -0.3514683}}, 'viewport': {'northeast': {'lat': 51.6723432, 'lng': 0.1482711}, 'southwest': {'lat': 51.38494009999999, 'lng': -0.3514683}}}}, {'place_id': 'ChIJA8c2lxTNXIgRmMwHc-RRGWI', 'address_components': [{'long_name': 'London', 'short_name': 'London', 'types': ['locality', 'political']}, {'long_name': 'Laurel County', 'short_name': 'Laurel County', 'types': ['administrative_area_level_2', 'political']}, {'long_name': 'Kentucky', 'short_name': 'KY', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'short_name': 'US', 'types': ['country', 'political']}], 'types': ['locality', 'political'], 'formatted_address': 'London, KY, USA', 'geometry': {'location': {'lat': 37.1289771, 'lng': -84.08326459999999}, 'location_type': 'APPROXIMATE', 'bounds': {'northeast': {'lat': 37.15226, 'lng': -84.03595709999999}, 'southwest': {'lat': 37.0797588, 'lng': -84.126262}}, 'viewport': {'northeast': {'lat': 37.15226, 'lng': -84.03595709999999}, 'southwest': {'lat': 37.0797588, 'lng': -84.126262}}}}, {'place_id': 'ChIJPxME6JelOIgROH-JN5Bcr9Y', 'address_components': [{'long_name': 'London', 'short_name': 'London', 'types': ['locality', 'political']}, {'long_name': 'Madison County', 'short_name': 'Madison County', 'types': ['administrative_area_level_2', 'political']}, {'long_name': 'Ohio', 'short_name': 'OH', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'short_name': 'US', 'types': ['country', 'political']}, {'long_name': '43140', 'short_name': '43140', 'types': ['postal_code']}], 'types': ['locality', 'political'], 'formatted_address': 'London, OH 43140, USA', 'geometry': {'location': {'lat': 39.8864493, 'lng': -83.4482529}, 'location_type': 'APPROXIMATE', 'bounds': {'northeast': {'lat': 39.9217861, 'lng': -83.3899969}, 'southwest': {'lat': 39.85928, 'lng': -83.4789231}}, 'viewport': {'northeast': {'lat': 39.9217861, 'lng': -83.3899969}, 'southwest': {'lat': 39.85928, 'lng': -83.4789231}}}}], 'status': 'OK'}
    res = get_lat_lon_from(response)
    pp.pprint(res)
    assert res == (51.5073509, -0.1277583)

def test_query_google_vincent():
    res = query_google("St Clement England")
    out = get_lat_lon_from(res)
    pp.pprint(out)
    assert out == (50.254969, -5.016414)
